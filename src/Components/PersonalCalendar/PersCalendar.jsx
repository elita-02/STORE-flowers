import React, { useState, useEffect } from 'react';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, getDocs, query, where, addDoc } from 'firebase/firestore';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './PersCalendar.scss';

const PersonalCalendar = () => {
  const [events, setEvents] = useState([]);
  const [newEvent, setNewEvent] = useState({
    name: '',
    date: '',
    phone: '',
    flower: '',
    category: '',
    address: ''
  });
  const [userEmail, setUserEmail] = useState(null);

  useEffect(() => {
    const auth = getAuth();
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserEmail(user.email);
        toast.success('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏', {
          autoClose: 3000,  // 3 —Å–µ–∫—É–Ω–¥–¥–∞–Ω –∫–∏–π–∏–Ω –∂–∞–±—ã–ª–∞—Ç
          closeOnClick: false,  // –ö–æ–ª–¥–æ–Ω—É—É—á—É –±–∞—Å—Å–∞ –∂–∞–±—ã–ª–±–∞–π—Ç
          pauseOnHover: false,  // Hover'–¥–µ –±–∏–ª–¥–∏—Ä“Ø“Ø –∂–∞–±—ã–ª–±–∞–π—Ç
          hideProgressBar: false, // –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–∏–ª–∫–µ—Å–∏–Ω –∫”©—Ä—Å”©—Ç”©—Ç
          newestOnTop: true,  // –ñ–∞“£—ã –±–∏–ª–¥–∏—Ä“Ø“Ø–ª”©—Ä –∂–æ–≥–æ—Ä—É–¥–∞ –±–æ–ª–æ—Ç
          rtl: false,  // –û“£–≥–æ –±—É—Ä—É–ª–≥–∞–Ω (–∂–æ–∫)
          pauseOnFocusLoss: true, // –§–æ–∫—É—Å –∂–æ–≥–æ–ª–≥–æ–Ω —É—á—É—Ä–¥–∞ –±–∏–ª–¥–∏—Ä“Ø“Ø —Ç–æ–∫—Ç–æ–π—Ç
          draggable: true, // –ë–∏–ª–¥–∏—Ä“Ø“Ø–Ω“Ø —Å“Ø–π—Ä”©–ø –∂“Ø—Ä“Ø“Ø–≥”© –±–æ–ª–æ—Ç
        });
      } else {
        setUserEmail(null);
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', {
          autoClose: 3000,  // 3 —Å–µ–∫—É–Ω–¥–¥–∞–Ω –∫–∏–π–∏–Ω –∂–∞–±—ã–ª–∞—Ç
          closeOnClick: true, // –ö–æ–ª–¥–æ–Ω—É—É—á—É –±–∞—Å–∫–∞–Ω–¥–∞ –∂–∞–±—ã–ª–∞—Ç
          pauseOnHover: false,  // Hover'–¥–µ –±–∏–ª–¥–∏—Ä“Ø“Ø –∂–∞–±—ã–ª–±–∞–π—Ç
          hideProgressBar: false,
          newestOnTop: true,
          rtl: false,
          pauseOnFocusLoss: true,
          draggable: true
        });
      }
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    if (userEmail) {
      const fetchEvents = async () => {
        const db = getFirestore();
        const q = query(collection(db, 'calendarEvents'), where('email', '==', userEmail));
        const querySnapshot = await getDocs(q);
        const fetchedEvents = querySnapshot.docs.map(doc => doc.data());
        setEvents(fetchedEvents);
      };
      fetchEvents();
    }
  }, [userEmail]);

  const handleAddEvent = async () => {
    if (newEvent.name && newEvent.date) {
      const db = getFirestore();
      await addDoc(collection(db, 'calendarEvents'), {
        ...newEvent,
        email: userEmail
      });
      toast.success(`"${newEvent.name}" –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ ${newEvent.date}`, { autoClose: 3000 });

      setNewEvent({
        name: '',
        date: '',
        phone: '',
        flower: '',
        category: '',
        address: ''
      });

      const q = query(collection(db, 'calendarEvents'), where('email', '==', userEmail));
      const querySnapshot = await getDocs(q);
      const updatedEvents = querySnapshot.docs.map(doc => doc.data());
      setEvents(updatedEvents);

    } else {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ò–º—è –∏ –î–∞—Ç–∞)', { autoClose: 3000 });
    }
  };

  return (
    <div className="calendar-container container">
      <h2>–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</h2>
      {userEmail ? (
        <>
          <div className="form-group">
            <input type="text" placeholder="–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è" value={newEvent.name} onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })} />
            <input type="date" value={newEvent.date} onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })} />
            <input type="text" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" value={newEvent.phone} onChange={(e) => setNewEvent({ ...newEvent, phone: e.target.value })} />
            <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤" value={newEvent.flower} onChange={(e) => setNewEvent({ ...newEvent, flower: e.target.value })} />
            <input type="text" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" value={newEvent.category} onChange={(e) => setNewEvent({ ...newEvent, category: e.target.value })} />
            <input type="text" placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" value={newEvent.address} onChange={(e) => setNewEvent({ ...newEvent, address: e.target.value })} />
            <button onClick={handleAddEvent}>–î–æ–±–∞–≤–∏—Ç—å</button>
          </div>

          <div className="event-list">
            <h3>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</h3>
            {events.length > 0 ? (
              <ul>
                {events.map((event, index) => (
                  <li key={index}>
                    <strong>{event.name}</strong> ‚Äî {event.date}<br />
                    üìû {event.phone}<br />
                    üå∏ {event.flower}<br />
                    üì¶ {event.category}<br />
                    üìç {event.address}
                  </li>
                ))}
              </ul>
            ) : (
              <p>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.</p>
            )}
          </div>
        </>
      ) : (
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å</p>
      )}

      <ToastContainer
        position="top-right"
        autoClose={3000} // 3 —Å–µ–∫—É–Ω–¥–¥–∞–Ω –∫–∏–π–∏–Ω –∂–∞–±—ã–ª–∞—Ç
        hideProgressBar={false}
        newestOnTop={true}
        closeOnClick={false} // –ö–æ–ª–¥–æ–Ω—É—É—á—É –±–∞—Å–∫–∞–Ω–¥–∞ –∂–∞–±—ã–ª–±–∞–π—Ç
        rtl={false}
        pauseOnFocusLoss={true}
        draggable={true}
        pauseOnHover={false} // Hover'–¥–µ –∂–∞–±—ã–ª–±–∞–π—Ç
      />
    </div>
  );
};

export default PersonalCalendar;
