import React, { useState } from 'react';
import "./Registration.scss";
import { Link, useNavigate } from 'react-router-dom';
import google from "../../assets/svg/google.svg"
import fecbook from "../../assets/svg/fecbook.svg"
import { auth } from "../../firebase";
import { toast } from 'react-toastify';
import { createUserWithEmailAndPassword } from 'firebase/auth';

function Registration() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  async function createUser() {
    try {
      const res = await createUserWithEmailAndPassword(auth, email, password);
      console.log(res);
      if (res) {
        toast.success("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  }

    const navigate = useNavigate();
    const [isModal, setIsModal] = useState(true);

    const handleClose = () => {
        setIsModal(false);
        navigate('/registration', { replace: true });
    };

    const handleLoginClick = () => {
        setIsModal(false);
        navigate('/login');
    };

    const renderFormContent = () => (
        <><div>

        </div>
            <h2 className="form-title">üå∏ BISHKEK-FLOWERS</h2>
            <p className="welcome-text">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ 10% —Å–∫–∏–¥–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!</p>
            
            <div className="form-grid">
                <div className="form-group">
                    <label>–í–∞—à–µ –∏–º—è</label>
                    <input type="text" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–π–≥–µ—Ä–∏–º" className="form-input" />
                </div>
                <div className="form-group">
                    <label>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</label>
                    <input onChange={(e) => setEmail(e.target.value)} type="email" placeholder="example@mail.com" className="form-input" value={email}/>
                </div>
            </div>

            <div className="form-grid">
                <div className="form-group">
                    <label>–ü–∞—Ä–æ–ª—å</label>
                    <input onChange={(e) => setPassword(e.target.value)} type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" className="form-input"   value={password}/>

                </div>
                <div className="form-group">
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                    <input type="tel" placeholder="+996 555 123 456" className="form-input" />
                </div>
            </div>

            <div className="form-group">
                <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                <input type="text" placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" className="form-input" />
            </div>

            <div className="form-group">
                <label>–õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç—ã</label>
                <select className="form-select">
                    <option>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞</option>
                    <option>–†–æ–∑—ã</option>
                    <option>–¢—é–ª—å–ø–∞–Ω—ã</option>
                    <option>–û—Ä—Ö–∏–¥–µ–∏</option>
                </select>
            </div>

            <div className="preference-group">
                <h4>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —É–ø–∞–∫–æ–≤–∫–µ:</h4>
                <div className="checkbox-grid">
                    <label className="checkbox-label">
                        <input type="checkbox" />
                        <span className="checkmark"></span>
                        –ú–∏–Ω–∏–º–∞–ª–∏–∑–º
                    </label>
                    <label className="checkbox-label">
                        <input type="checkbox" />
                        <span className="checkmark"></span>
                        –ö–ª–∞—Å—Å–∏–∫–∞
                    </label>
                    <label className="checkbox-label">
                        <input type="checkbox" />
                        <span className="checkmark"></span>
                        –ü—Ä–µ–º–∏—É–º
                    </label>
                </div>
            </div>

            <button onClick={createUser} className="submit-btn">
                –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </button>

            <div className="social-login">
  <p>–ò–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑:</p>
  <div className="social-buttons">
    <img 
      src={google} 
      alt="google"
      className="social-icon" 
      onClick={() => window.location.href='/google-auth'}
    />
    <img 
      src={fecbook} 
      alt="fecbook"
      className="social-icon"
      onClick={() => window.location.href='/facebook-auth'}
    />
  </div>
</div>

            <p className="terms-text">
                –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="#">—É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</a>
            </p>

            <p className="auth-switch">
                –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link to="/login" onClick={handleLoginClick}>–í–æ–π—Ç–∏</Link>
            </p>
        </>
    );

    return (
        <div className="registration-container">
            {isModal ? (
                <div className="login-overlay">
                    <div className="floating-login-container">
                        <button 
                            className="close-btn" 
                            onClick={handleClose}
                            aria-label="–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ"
                        >
                            &times;
                        </button>
                        <div className="flower-pattern"></div>
                        <div className="login-form">
                            {renderFormContent()}
                        </div>
                    </div>
                </div>
            ) : (
                <div className="static-registration-container">
                    <div className="registration-form">
                        {renderFormContent()}
                    </div>
                </div>
            )}
        </div>
    );
}

export default Registration;